<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on Will Gueble</title>
    <link>https://grueble.github.io/</link>
    <description>Recent content in Home on Will Gueble</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <copyright>Copyright © 2017 Will Gueble. All Rights Reserved.</copyright>
    <lastBuildDate>Sun, 26 Nov 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://grueble.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Humble Beginnings</title>
      <link>https://grueble.github.io/posts/humble-beginnings/</link>
      <pubDate>Sun, 26 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>https://grueble.github.io/posts/humble-beginnings/</guid>
      <description>I wanted to mark this moment as my first major milestone on the way to a completed game.
  Each unique image displayed on screen belongs to a managed game object, with seperate components to handle input, physics, and graphics. In the future, any sound effects or music will be handled by an audio component attached in a similar fashion. The component design pattern was a tip from the Robert Nystrom&amp;rsquo;s Game Programming Patterns.</description>
    </item>
    
    <item>
      <title>Ray-Tracer</title>
      <link>https://grueble.github.io/posts/ray-tracer/</link>
      <pubDate>Thu, 28 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://grueble.github.io/posts/ray-tracer/</guid>
      <description>When my computer was stolen back in early 2016, I lost almost all of my files from the days of my undergraduate studies. It wasn&amp;rsquo;t until recently, with all of time I&amp;rsquo;ve spent familiarizing myself with OpenGL, that I decided to attempt to reconstruct my years-old Computer Graphics project.
The original application ran on a 32-bit Linux VM, so I knew that it would take a little bit of tinkering to compile and run on my machine.</description>
    </item>
    
    <item>
      <title>Application Logic</title>
      <link>https://grueble.github.io/posts/application-logic/</link>
      <pubDate>Tue, 13 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://grueble.github.io/posts/application-logic/</guid>
      <description>I now had code written for both the game logic and graphics capabilities, so it was time to put the finishing touches on my application’s first draft. The ‘StandoffApp’ class encapsulates this functionality, marrying together all of the disparate pieces that I had already developed. LazyFoo’s tutorial series proved to be essential once again, this time providing me with a structural template on which to base my SDL_Event input handling loop.</description>
    </item>
    
    <item>
      <title>Networked Multiplayer</title>
      <link>https://grueble.github.io/posts/networked-multiplayer/</link>
      <pubDate>Tue, 13 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://grueble.github.io/posts/networked-multiplayer/</guid>
      <description>With the core Standoff application under my belt, I was finally able to move on to the networking portion of the game’s development. I gravitated towards working with network sockets in part due to my background using them at my previous job. The Standoff application never necessitated a complex implementation of networking - a simple buffer of bits suffices to transmit any message between client and server. Messages rarely exceed a byte in size, and only when asked to display a game name of considerable length.</description>
    </item>
    
    <item>
      <title>Game Logic</title>
      <link>https://grueble.github.io/posts/game-logic/</link>
      <pubDate>Mon, 12 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://grueble.github.io/posts/game-logic/</guid>
      <description>In order to capture all of the capabilities outlined in my design, I began development with a ‘Piece’ class to handle ownership of all the relevant spatial and qualitative traits. This class is responsible for executing all actions available to pieces, and provides a layer of protection for critical data about the game’s state - piece’s are only accessed or altered through the available public methods.
The Standoff project was my first foray into memory management on such a large scale, so I wanted to use it as an opportunity to experiment with different techniques for encapsulating the lifetime of an object.</description>
    </item>
    
    <item>
      <title>Graphics with SDL</title>
      <link>https://grueble.github.io/posts/graphics-w-sdl/</link>
      <pubDate>Mon, 12 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://grueble.github.io/posts/graphics-w-sdl/</guid>
      <description>With a rough version of the game’s core mechanics in hand, I arrived at the first major hurdle of my development process - integration of a graphics API. It wouldn’t have made sense to invest any more time in iterating through mechanical variations on the main loop without a fully testable prototype; debugging with the command line can only take you so far. After some deliberation, I settled on the latest version of Simple DirectMedia Layer development library (SDL 2.</description>
    </item>
    
    <item>
      <title>Design</title>
      <link>https://grueble.github.io/posts/design/</link>
      <pubDate>Sat, 10 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://grueble.github.io/posts/design/</guid>
      <description>I asked Milo Beckman to provide a brief discussion of his design goals for Standoff.
 The original idea for Standoff was to make a game that was cross between chess and a scene in an action movie where a bunch of people are pointing guns at each other.
I was playing a game of chess where no pieces were captured for a very long time, and I thought it was cool how the strategy was oriented around the possibility of capture even though no captures were happening.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://grueble.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grueble.github.io/about/</guid>
      <description>Not so long ago I was an undergraduate at Wesleyan University. Always been a player of games, of all varieties. I get a kick out of writing graphics executables and gameplay logic. Game Design has slowly grown as an interest of mine, especially its mathematical, logical, &amp;amp; metaphorical qualities. I write and playtest rules variants for tabletop RPGs. Ludology blows my mind.
More recently, I developed a modest game application, complete with command line client-server interface, local/networked multiplayer, and 2D graphics.</description>
    </item>
    
    <item>
      <title>Code Samples</title>
      <link>https://grueble.github.io/code-samples/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grueble.github.io/code-samples/</guid>
      <description>~ 2D Axis-Aligned Bounding Box vs. Triangle Collision Detection using the Separating Axis Theorem bool AABBvsTriangle(Manifold&amp;amp; m) { AABB_t* a = m.a-&amp;gt;asAABB(); Triangle* b = m.b-&amp;gt;asTriangle(); bool hypotenuse_case = collide_hyp(*b, m.b_p, m.a_p); // test for projection overlap along the x-axis float dist_x = m.a_p.x - m.b_p.x; float a_proj = scalar_proj(a-&amp;gt;xw, X_AXIS); // + scalar_proj(a-&amp;gt;yw, X_AXIS); float b_proj, overlap_x; // determine the relative position of AABB to Triangle on the x-axis if ((b-&amp;gt;xw.</description>
    </item>
    
    <item>
      <title>Résumé</title>
      <link>https://grueble.github.io/resume/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grueble.github.io/resume/</guid>
      <description>Will Gueble Download: pdf  Overview A self-motivated Software Engineer with a passion for developing interactive graphical applications of all kinds. Demonstrated success transforming design goals into implementation details across a variety of projects. Outstanding communication and interpersonal skills..
 Education Wesleyan University | Middletown, CT | 2011 – 2015  Earned a Bachelor of Arts, double majoring in Computer Science and Philosophy, GPA: 3.5 Selected Undergraduate Coursework: Computer Graphics, Algorithms and Complexity, Automata Theory, Computer Structure, Data Structures, Vectors &amp;amp; Matrices, Writing About Video Games</description>
    </item>
    
  </channel>
</rss>